---
import type { Tag } from "app/types/Tag";
import { css } from "styled-system/css";
interface Props {
  tags: Tag[];
}

const { tags } = Astro.props;

const tagCounts = tags.reduce((acc: { [key: string]: number }, tag) => {
  acc[tag.libelle] = (acc[tag.libelle] || 0) + 1;
  return acc;
}, {});

const uniqueTagsWithCounts = Object.keys(tagCounts).map((libelle) => {
  const originalTag = tags.find((tag) => tag.libelle === libelle);
  return {
    ...originalTag,
    count: tagCounts[libelle],
  };
});

const Kbd = css({
  display: "inline-flex",
  alignItems: "center",
  justifyContent: "center",
  fontWeight: "medium",
  backgroundColor: "gray-a4",
  letterSpacing: "0.1px",
  width: "auto",
  color: "gray-a10",
  height: "28px",
  px: 2,
  fontSize: "text-xs", // text-xs
  rounded: "md",
  minWidth: "28px",
});
---

<aside
  class={css({
    bg: "secondaryLight",
    h: "72",
    rounded: "md",
    position: "sticky",
    top: 0,
    display: "flex",
    p: 4,
    minWidth: "56",
    flexDirection: "column",
    borderWidth: 1,
    borderColor: "neutral.700",
  })}
>
  <div
    class={css({
      display: "flex",
      flexDirection: "column",
      gap: 3,
    })}
  >
    <div>
      <label
        for="search"
        class={css({
          fontSize: "sm",
          color: "neutral.400",
        })}
      >
        Search
      </label>
      <div
        class={css({
          position: "relative",
          w: "full",
        })}
      >
        <input
          class={css({
            w: "full",
            px: 2,
            py: 1.5,
            bg: "neutral.500/10",
            color: "neutral.50",
            rounded: "md",
            fontSize: "sm",
            border: 0,
            _placeholder: {
              color: "neutral.400",
              fontSize: "sm",
            },
            _focus: {
              outline: "none",
              bg: "neutral.500/20",
            },
          })}
          placeholder="Search snippets..."
          type="search"
          id="search"
          name="search"
        />
        <span
          class={css({
            position: "absolute",
            right: 2,
            top: "50%",
            display: "flex",
            pointerEvents: "none",
            fontSize: "xs",
            transform: "translateY(-50%)",
            py: 0.5,
            px: 1,
            rounded: "md",
            bg: "neutral.500/20",
            color: "neutral.400",
          })}
        >
          <Kbd>/</Kbd>
        </span>
      </div>
    </div>
    <span
      class={css({
        fontSize: "sm",
        color: "neutral.400",
      })}
    >
      Tags
    </span>
  </div>
  <div
    class={css({
      mt: 2,
      display: "flex",
      flexDirection: "column",
      mx: -2,
      gap: 0.5,
    })}
  >
    {
      uniqueTagsWithCounts.map((tag) => (
        <div
          class={css({
            fontSize: "sm",
            display: "flex",
            py: 1.5,
            px: 2,
            rounded: "md",
            _hover: {
              bg: "neutral.500/10",
              cursor: "pointer",
              transitionDuration: "fast",
            },
            justifyContent: "space-between",
            alignItems: "center",
            color: "neutral.50",
          })}
        >
          <span>{tag.libelle}</span>
          <span>{tag.count}</span>
        </div>
      ))
    }
  </div>
</aside>
